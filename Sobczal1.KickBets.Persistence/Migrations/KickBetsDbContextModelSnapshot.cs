// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sobczal1.KickBets.Persistence;

#nullable disable

namespace Sobczal1.KickBets.Persistence.Migrations
{
    [DbContext(typeof(KickBetsDbContext))]
    partial class KickBetsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.BaseBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FixtureId");

                    b.ToTable("Bets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseBet");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.BetsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<int>("WdlftDataId")
                        .HasColumnType("int");

                    b.Property<int>("WdlhtDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WdlftDataId");

                    b.HasIndex("WdlhtDataId");

                    b.ToTable("BetsData");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.Wdlft.WdlftData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AwayBetsValue")
                        .HasColumnType("float");

                    b.Property<double>("DrawBetsValue")
                        .HasColumnType("float");

                    b.Property<double>("HomeBetsValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WdlftData");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.Wdlht.WdlhtData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AwayBetsValue")
                        .HasColumnType("float");

                    b.Property<double>("DrawBetsValue")
                        .HasColumnType("float");

                    b.Property<double>("HomeBetsValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WdlhtData");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.DbUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EventsUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("FixturesBigUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("FixturesSmallUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaguesUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("LineupsUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("StatisticsUpdate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DbUpdates");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraTime")
                        .HasColumnType("int");

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AwayLineupId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("BetsDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeLineupId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Referee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayLineupId")
                        .IsUnique()
                        .HasFilter("[AwayLineupId] IS NOT NULL");

                    b.HasIndex("AwayStatisticsId")
                        .IsUnique()
                        .HasFilter("[AwayStatisticsId] IS NOT NULL");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("BetsDataId")
                        .IsUnique();

                    b.HasIndex("HomeLineupId")
                        .IsUnique()
                        .HasFilter("[HomeLineupId] IS NOT NULL");

                    b.HasIndex("HomeStatisticsId")
                        .IsUnique()
                        .HasFilter("[HomeStatisticsId] IS NOT NULL");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("ScoreId")
                        .IsUnique();

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.HasIndex("VenueId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.League", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Lineup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoachName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoachPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Lineups");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lineup");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GridX")
                        .HasColumnType("int");

                    b.Property<int?>("GridY")
                        .HasColumnType("int");

                    b.Property<int>("LineupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Starting11")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LineupId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AwayCurrentScore")
                        .HasColumnType("int");

                    b.Property<int?>("AwayExtraTime")
                        .HasColumnType("int");

                    b.Property<int?>("AwayFullTime")
                        .HasColumnType("int");

                    b.Property<int?>("AwayHalfTime")
                        .HasColumnType("int");

                    b.Property<int?>("AwayPenalty")
                        .HasColumnType("int");

                    b.Property<int?>("HomeCurrentScore")
                        .HasColumnType("int");

                    b.Property<int?>("HomeExtraTime")
                        .HasColumnType("int");

                    b.Property<int?>("HomeFullTime")
                        .HasColumnType("int");

                    b.Property<int?>("HomeHalfTime")
                        .HasColumnType("int");

                    b.Property<int?>("HomePenalty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccuratePasses")
                        .HasColumnType("int");

                    b.Property<int?>("BlockedShots")
                        .HasColumnType("int");

                    b.Property<int?>("CornerKicks")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fouls")
                        .HasColumnType("int");

                    b.Property<int?>("GoalkeeperSaves")
                        .HasColumnType("int");

                    b.Property<int?>("Offsides")
                        .HasColumnType("int");

                    b.Property<double?>("Passes")
                        .HasColumnType("float");

                    b.Property<double?>("Possession")
                        .HasColumnType("float");

                    b.Property<int?>("RedCards")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsInsideBox")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsOffGoal")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsOnGoal")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsOutsideBox")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPasses")
                        .HasColumnType("int");

                    b.Property<int?>("TotalShots")
                        .HasColumnType("int");

                    b.Property<int?>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Statistics");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Statistics");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Elapsed")
                        .HasColumnType("int");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Team", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Venue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("BalanceLastAddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.Wdlft.WdlftBet", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Bets.BaseBet");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("WdlftBet");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.Wdlht.WdlhtBet", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Bets.BaseBet");

                    b.Property<int>("Side")
                        .HasColumnType("int")
                        .HasColumnName("WdlhtBet_Side");

                    b.HasDiscriminator().HasValue("WdlhtBet");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayEvent", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Event");

                    b.HasIndex("FixtureId");

                    b.HasDiscriminator().HasValue("AwayEvent");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayLineup", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Lineup");

                    b.HasDiscriminator().HasValue("AwayLineup");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayStatistics", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Statistics");

                    b.HasDiscriminator().HasValue("AwayStatistics");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeEvent", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Event");

                    b.HasIndex("FixtureId");

                    b.HasDiscriminator().HasValue("HomeEvent");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeLineup", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Lineup");

                    b.HasDiscriminator().HasValue("HomeLineup");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeStatistics", b =>
                {
                    b.HasBaseType("Sobczal1.KickBets.Domain.Football.Statistics");

                    b.HasDiscriminator().HasValue("HomeStatistics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.BaseBet", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Identity.AppUser", "AppUser")
                        .WithMany("Bets")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.BetsData", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Bets.Wdlft.WdlftData", "WdlftData")
                        .WithMany()
                        .HasForeignKey("WdlftDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Bets.Wdlht.WdlhtData", "WdlhtData")
                        .WithMany()
                        .HasForeignKey("WdlhtDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WdlftData");

                    b.Navigation("WdlhtData");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Event", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Fixture", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.AwayLineup", "AwayLineup")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "AwayLineupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sobczal1.KickBets.Domain.Football.AwayStatistics", "AwayStatistics")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "AwayStatisticsId");

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Bets.BetsData", "BetsData")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "BetsDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.HomeLineup", "HomeLineup")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "HomeLineupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sobczal1.KickBets.Domain.Football.HomeStatistics", "HomeStatistics")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "HomeStatisticsId");

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Score", "Score")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Status", "Status")
                        .WithOne("Fixture")
                        .HasForeignKey("Sobczal1.KickBets.Domain.Football.Fixture", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sobczal1.KickBets.Domain.Football.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");

                    b.Navigation("AwayLineup");

                    b.Navigation("AwayStatistics");

                    b.Navigation("AwayTeam");

                    b.Navigation("BetsData");

                    b.Navigation("HomeLineup");

                    b.Navigation("HomeStatistics");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Score");

                    b.Navigation("Status");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Lineup", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Player", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.Lineup", "Lineup")
                        .WithMany("Players")
                        .HasForeignKey("LineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lineup");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayEvent", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.Fixture", "Fixture")
                        .WithMany("AwayEvents")
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeEvent", b =>
                {
                    b.HasOne("Sobczal1.KickBets.Domain.Football.Fixture", "Fixture")
                        .WithMany("HomeEvents")
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Bets.BetsData", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Fixture", b =>
                {
                    b.Navigation("AwayEvents");

                    b.Navigation("HomeEvents");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Lineup", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Score", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.Status", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Identity.AppUser", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayLineup", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.AwayStatistics", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeLineup", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });

            modelBuilder.Entity("Sobczal1.KickBets.Domain.Football.HomeStatistics", b =>
                {
                    b.Navigation("Fixture")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
